<?php

/*
 * implementation of hook_menu()
 */
function menu_festival_link_views_post_render(&$view, &$output, &$cache) {
    //print_r($output);
   // global $pager_for_blog;
    if($view->name == 'blog' && $view->current_display == 'bloglist'){
        $custom_pager = '';
        $custom_pager = substr($output, strpos($output, '<div class="item-list"><ul class="pager">'));
        $custom_pager = substr($custom_pager, 0, strpos($custom_pager, '</ul></div>') + 11);
        $custom_filter = '';
        $custom_filter = substr($output, strpos($output, '<div class="view-filters">'));
        $custom_filter = substr($custom_filter, 0, strpos($custom_filter, '</form>    </div>') + 17);
        global $custom_pager_filter_block_content;
        $headerTitle = '<h1 class="title" id="page-title">Blog</h1>';
        $custom_pager = "<div id='pager-blog'>". $custom_pager. "</div>";
        $custom_pager_filter_block_content = $headerTitle. $custom_filter. $custom_pager;
    }
}

function menu_festival_link_menu(){
    $items['festival'] = array(
        'title' => 'Festival',
        'page callback' => 'menu_festival_link_festival',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'main-menu',
        'weight' => 10,
    );
    $items['events_all'] = array(
        'title' => 'Events',
        'page callback' => 'menu_festival_link_events_redirect',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'main-menu',
    );
    
    return $items;
}

/*function menu_festival_link_donate_confirmation_form_submit($form, &$form_state) {
  drupal_set_message(t('Thanks for filling out the form'));
}*/

function getLastFestivalId(){
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'festival')
      ->fieldOrderBy('field_festival_date', 'value', 'DESC')
      ->execute();
    foreach($result['node'] as $nid => $useless_variable){
        return $nid;
    }
}

function menu_festival_link_festival(){
    drupal_goto('node/'. getLastFestivalId());
}

function menu_festival_link_events_redirect(){
    drupal_goto('events', array('query' => array('tid' => '')));
}

function menu_festival_link_commerce_cart_order_is_cart($order, &$is_cart) {
    $is_cart = FALSE;
    return FALSE;
}

/*function menu_festival_link_commerce_checkout_page_info_alter(&$checkout_pages) {
  $checkout_pages['review']['weight'] = 15;
  ob_start();
  $handle = fopen("a.txt", 'w');
  print_r($checkout_pages);
  fwrite($handle, ob_get_contents());
  ob_end_clean();
}*/

/**
* Implements hook_block_info().
*/
function menu_festival_link_block_info() {
    $blocks['date_filter'] = array(
        'info' => t('Filter by date genre and type'),
        'status' => TRUE,
        'region' => 'content',
        'weight' => 0,
        'visibility' => 1,
    );
    $blocks['custom_pager_filter'] = array(
        'info' => t('Pager and filter for blog in header'),
        'status' => TRUE,
        'region' => 'header',
        'weight' => 0,
        'visibility' => 1,
    );
    $blocks['tiny_cart'] = array(
        'info' => t('Tiny cart with quantity of goods'),
        'status' => TRUE,
        'region' => 'content',
        'weight' => 0,
        'visibility' => 1,
    );
    return $blocks;
}

/**
* Implements hook_block_view().
*/

function menu_festival_link_block_view($delta = '') {
    switch ($delta) {
        case 'custom_pager_filter':
            $block['content'] = menu_festival_link_block_contents($delta);
            return $block;
            break;
        
        case 'date_filter':
//            $block['subject'] = t('Date filter');
            $block['content'] = menu_festival_link_block_contents($delta);
            return $block;
            break;
        
        case 'tiny_cart':
            $block['content'] = menu_festival_link_block_contents($delta);
            return $block;
            break;
    }
}

/**
* A module-defined block content function.
*/
function menu_festival_link_block_contents($delta) {
    switch ($delta) {
        case 'custom_pager_filter':
            global $custom_pager_filter_block_content;
            return $custom_pager_filter_block_content;
            break;
        
        case 'tiny_cart':
            global $user;
            $quantity = 0;
            $order = commerce_cart_order_load($user->uid);
            if ($order) {
                $wrapper = entity_metadata_wrapper('commerce_order', $order);
                $line_items = $wrapper->commerce_line_items;
                $quantity = commerce_line_items_quantity($line_items, commerce_product_line_item_types());
                $total = commerce_line_items_total($line_items);
                $currency = commerce_currency_load($total['currency_code']);
            }
            if($quantity == '' || $quantity == null){
                $quantity = '0';
            }
            $cart_img = '<a href="'. url('', array('query' => array('q' => 'cart'))). '"><img src = "'. base_path() . path_to_theme() . '/images/commerce/cart_small.png" /></a>';
            return '<div class="tiny-cart-block"><p>'. (string)$quantity. '</p>'. $cart_img. '</div>';
            break;
        
        case 'date_filter':
            $all = '';
            $all .= '<div class = "type-filter-events-all">';
            $var_array = $_GET;
            $var_array['type'] = 'fest';
            $href_fest = url('', array('query' => $var_array));
            $var_array['type'] = 'non-fest';
            $href_nonfest = url('', array('query' => $var_array));
            $var_array['type'] = 'all';
            $href_all = url('', array('query' => $var_array));
            $all .= '<div class = "filter-button">All</div><a href="'. $href_all. '"><img src="'. base_path() . path_to_theme() . '/images/filters/currentfilter-big.png" /></a>';
            if(isset($_GET['type']) && $_GET['type'] != 'all'){
                $all .= '<div id="filter-ul" class="opened-ul-filter"><ul class="events-filter-ul">';
            }else{
                $all .= '<div id="filter-ul" class="closed-ul-filter"><ul class="events-filter-ul">';
            }
            $addition['href_fest'] = '';
            $addition['href_nonfest'] = '';
            if(isset($_GET['type'])){
                if($_GET['type'] == 'fest'){
                    $addition['href_fest'] = '<img src="'. base_path() . path_to_theme() . '/images/filters/currentfilter-small.png" />';
                }else if($_GET['type'] == 'non-fest'){
                    $addition['href_nonfest'] = '<img src="'. base_path() . path_to_theme() . '/images/filters/currentfilter-small.png" />';
                }
            }
            $all .= '<li><a href="'. $href_fest. '">festival</a>'. $addition['href_fest']. '</li>';
            $all .= '<li><a href="'. $href_nonfest. '">non-festival</a>'. $addition['href_nonfest']. '</li>';
            $all .= '</ul></div></div>';
            
            //DATE
 
            $var_array = $_GET;
            $var_array['field_event_date_value']['value']['date'] = '';
            $href_date = url('', array('query' => $var_array));
            if(isset($_GET['field_event_date_value']['value']['date']) && $_GET['field_event_date_value']['value']['date'] != ''){
                $all .= '<div class = "date-filter-events-all"><div class="filter-button">Date</div><a href="'. $href_date. '"><img src="'. base_path() . path_to_theme() . '/images/filters/currentfilter-big.png" /></a><div id="filter-ul" class="opened-ul-filter"><ul class="events-filter-ul">';
            }else{
                $all .= '<div class = "date-filter-events-all"><div class="filter-button">Date</div><a href="'. $href_date. '"><img src="'. base_path() . path_to_theme() . '/images/filters/currentfilter-big.png" /></a><div id="filter-ul" class="closed-ul-filter"><ul class="events-filter-ul">';
            }
            
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'node')
                  ->entityCondition('bundle', 'event')
                  ->fieldCondition('field_event_date', 'value', date('Y-m-d'),'>=')
                  ->fieldOrderBy('field_event_date', 'value');
            $lastFestId = getLastFestivalId();
            if(isset($_GET['type'])){
                switch($_GET['type']){
                    case 'fest':
                        $query->fieldCondition('field_festival_reference', 'target_id', $lastFestId,'=');
                        break;
                    
                    case 'non-fest':
                        $query->fieldCondition('field_festival_reference', 'target_id', $lastFestId, '!=');
                        break;
                    
                }
            }
            $eventsWeNeed = $query->execute();
            if(isset($eventsWeNeed['node'])){
              $times = array();
              
              foreach($eventsWeNeed['node'] as $nid => $useless){
                    $eventNode = node_load($nid);
                    //make event time
                    $fieldPrepare = $eventNode->field_event_date;
                    $allDate = $fieldPrepare['und'][0]['value'];
                    $dateArray = explode(' ', $allDate);
                    $timer = $dateArray[0];
                   
                    //make event time in <a> tag
                    $particularDate = explode('-', $timer);
                    $dateLink = date('D jS F', mktime('0', '0', '0', $particularDate[1], $particularDate[2], $particularDate[0]));
                    $var_array['field_event_date_value']['value']['date'] = $timer;
                    $href_date = url('', array('query' => $var_array));
                    $times[$timer] = array('href' => $href_date, 'link' => $dateLink);
                }
                
                foreach($times as $timer => $certainTime){

                    $all .= '<li><a href="'. $certainTime['href']. '">'. $certainTime['link']. '</a>';
                    if(isset($_GET['field_event_date_value']['value']['date'])){
                        if($_GET['field_event_date_value']['value']['date'] == $timer){
                            $all .= '<img src="'. base_path() . path_to_theme() . '/images/filters/currentfilter-small.png" />';
                        }
                    }
                    $all .= '</li>'; 
                }
            }
            
            $all .= '</ul></div></div>';
            
            
            $vocabularys = taxonomy_get_vocabularies();
            foreach($vocabularys as $tid => $vocabulary){
                if($vocabulary->name == 'genre'){
                    $tags = taxonomy_get_tree($vocabulary->vid);
                    $var_array = $_GET;
                    $var_array['tid'] = '';
                    $href_tax = url('', array('query' => $var_array));
                    $all .= '<div class = "tax-filter-events-all"><div class = "filter-button">Genre</div><a href="'. $href_tax. '"><img src="'. base_path() . path_to_theme() . '/images/filters/currentfilter-big.png" /></a>';
                    if(isset($_GET['tid']) && $_GET['tid'] != ''){
                        $all .= '<div id="filter-ul" class="opened-ul-filter"><ul class="events-filter-ul">';
                    }else{
                        $all .= '<div id="filter-ul" class="closed-ul-filter"><ul class="events-filter-ul">';
                    }
                    foreach($tags as $tag){
                        //$term = str_replace(' ', '+', $tag->name);
                        $var_array['tid'] = $tag->name;
                        $href_tax = url('', array('query' => $var_array));
                        $all .= '<li><a href="'. $href_tax. '">'. $tag->name. '</a>';

                        if(isset($_GET['tid'])){
                            if($_GET['tid'] == $tag->name){
                                $all .= '<img src="'. base_path() . path_to_theme() . '/images/filters/currentfilter-small.png" />';
                            }
                        }
                        $all .= '</li>';
                    }
                    $all .= '</ul></div></div>';
                }
            }
            return $all;
            /*$view = views_get_view('events');
            $view->set_display('page');
            $view->exposed_input['field_event_date_value2']['value']['date'] = '2014-01-01';
            $view->execute();
            return $view->preview();*/
            break;
    }
}

function menu_festival_link_form_alter(&$form, &$form_state, $form_id) {
  if(isset($_GET['sid'])){

  if ($form_id == 'webform_client_form_374'){
    $submission = webform_get_submission(373, $_GET['sid']);
    //dpm($submission);
    //dpm($form);
    $prevData = $submission->data;
    $form['submitted']['amount']['#default_value'] = $prevData[1]['value'][0];
    $form['submitted']['amount']['#disabled'] = TRUE;
    $form['submitted']['name']['first']['#default_value'] = $prevData[3]['value'][0];
    $form['submitted']['name']['first']['#disabled'] = TRUE;
    $form['submitted']['name']['last']['#default_value'] = $prevData[4]['value'][0];
    $form['submitted']['name']['last']['#disabled'] = TRUE;
    $form['submitted']['address_all']['address1']['#default_value'] = $prevData[6]['value'][0];
    $form['submitted']['address_all']['address1']['#disabled'] = TRUE;
    $form['submitted']['address_all']['address2']['#default_value'] = $prevData[7]['value'][0];
    $form['submitted']['address_all']['address2']['#disabled'] = TRUE;
    $form['submitted']['address_all']['city']['#default_value'] = $prevData[8]['value'][0];
    $form['submitted']['address_all']['city']['#disabled'] = TRUE;
    $form['submitted']['address_all']['country']['#default_value'] = $prevData[10]['value'][0];
    $form['submitted']['address_all']['country']['#disabled'] = TRUE;
    $form['submitted']['address_all']['zip']['#default_value'] = $prevData[9]['value'][0];
    $form['submitted']['address_all']['zip']['#disabled'] = TRUE;
    $form['submitted']['night_phone_a']['#default_value'] = $prevData[11]['value'][0];
    $form['submitted']['night_phone_a']['#disabled'] = TRUE;
    $form['first_name'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[3]['value'][0],
    );
    $form['amount'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[1]['value'][0],
    );
    $form['last_name'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[4]['value'][0],
    );
    $form['address1'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[6]['value'][0],
    );
    $form['address2'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[7]['value'][0],
    );
    $form['city'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[8]['value'][0],
    );
    $form['zip'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[9]['value'][0],
    );
    $form['country'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[10]['value'][0],
    );
    $form['night_phone_a'] = array(
      '#type' => 'hidden',
      '#value' => $prevData[11]['value'][0],
    );
    $form['#action'] = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    $form['business'] = array(
      '#type' => 'hidden',
      '#value' => 'shelko_1353991440_biz@gmail.com',
    );
    $form['cmd'] = array(
      '#type' => 'hidden',
      '#value' => '_donations',
    );
    $form['cancel_return'] = array(
      '#type' => 'hidden',
      '#value' => url(variable_get('site_frontpage', 'node')),
    );
    $form['item_name'] = array(
      '#type' => 'hidden',
      '#value' => 'Donation for Jewish Book Week',
    );
    $form['currency_code'] = array(
      '#type' => 'hidden',
      '#value' => 'GBP',
    );
    $form['submit'] = array(
      '#prefix' => '<div id="edit-actions-donate">',
      '#sufix' => '</div>',
      '#type' => 'image_button',
      '#src' => 'https://www.sandbox.paypal.com/en_US/i/btn/btn_donate_SM.gif',
    );
  }  
  }
  
  if ($form_id == 'webform-client-form-523') {// ____!!!
    $form['email'] = array(
      '#type' => 'hidden',
    //'#name' => 'email',
      '#value' => 'asd@gmail.com',
    );
    
  }
  
  if ($form_id == 'webform_client_form_373') {
    if(isset($_GET['sid'])){
      $submission = webform_get_submission(372, $_GET['sid']);
      //dpm($submission);
      //dpm($form);
      $prevData = $submission->data;
      $form['submitted']['amount']['#default_value'] = $prevData[1]['value'][0];
      $form['submitted']['name']['first']['#default_value'] = $prevData[4]['value'][0];
      $form['submitted']['name']['last']['#default_value'] = $prevData[5]['value'][0];
      $form['submitted']['address_all']['address_1']['#default_value'] = $prevData[7]['value'][0];
      $form['submitted']['address_all']['address_2']['#default_value'] = $prevData[8]['value'][0];
      $form['submitted']['address_all']['city']['#default_value'] = $prevData[9]['value'][0];
      $form['submitted']['address_all']['country']['#default_value'] = $prevData[11]['value'][0];
      $form['submitted']['address_all']['postal_zipcode']['#default_value'] = $prevData[10]['value'][0];
      $form['submitted']['phone_number']['#default_value'] = $prevData[14]['value'][0];
    }
  }
/*
    $form['text'] = array(
      '#type' => 'markup',
      '#markup' => 'asd',
    );
    $form['#action'] = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    $form['business'] = array(
      '#type' => 'hidden',
      '#value' => 'shelko_1353991440_biz@gmail.com',
    );
    $form['cmd'] = array(
      '#type' => 'hidden',
      '#value' => '_donations',
    );
    $form['cancel_return'] = array(
      '#type' => 'hidden',
      '#value' => url(variable_get('site_frontpage', 'node')),
    );
    $form['item_name'] = array(
      '#type' => 'hidden',
      '#value' => 'Donation for Jewish Book Week',
    );
    $form['amount'] = array(
      '#type' => 'hidden',
      '#value' => '20.00',
    );
    $form['currency_code'] = array(
      '#type' => 'hidden',
      '#value' => 'GBP',
    );
    //<input type="hidden" name="business" value="donations@your-web-domain.com">

    $form['submit'] = array(
      '#type' => 'image_button',
      '#src' => 'https://www.sandbox.paypal.com/en_US/i/btn/btn_donate_SM.gif',
    );
    */
}//customer_profile_billing[commerce_customer_address][und][0][country]